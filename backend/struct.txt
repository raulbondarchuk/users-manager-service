my_project/
├── cmd/                                   // Директория для исполняемых программ (entry points).
│   └── my_service/                        // Конкретный сервис (bin), например, "my_service".
│       └── main.go                        // Точка входа в программу; вызывает код из internal/app и др.
├── internal/                              // Основная «внутренняя» часть приложения, закрытая для внешних импортов.
│   ├── composition/                       // Пакет инициализации и запуска (bootstrap) сервиса.
│   │   ├── app.go                         // Основная логика запуска приложения (Run()), конфигурация и т.д.
│   │   └── server.go                      // Вспомогательные функции для запуска HTTP и gRPC серверов.
│   ├── domain/                            // Доменная область (Entities, Value Objects, Domain Services и т.д.).
│   │   ├── user/                          // Пакет для сущности User и связанных доменных интерфейсов/логики.
│   │   │   ├── entity.go                  // Определения структуры User, Profile и т.п.
│   │   │   ├── repository.go              // Интерфейс репозитория (контракта) для User.
│   │   │   └── service.go                 // Дополнительные доменные сервисы (валидация, бизнес-правила).
│   │   ├── subuser/                       // Пакет для сущности SubUser (вторичного пользователя).
│   │   │   ├── entity.go                  // Определения структуры SubUser, возможно связь с User.
│   │   │   ├── repository.go              // Интерфейс репозитория для SubUser.
│   │   │   └── service.go                 // Дополнительные доменные сервисы для SubUser.
│   │   └── (другие доменные сущности...)  // Можно добавлять другие пакеты для каждой существенной части домена.
│   ├── application/                       // Слой «use-case» (или «application service») — координация доменных операций.
│   │   ├── user_usecase.go                // Логика, связанная с обработкой операций для пользователей (User).
│   │   ├── subuser_usecase.go             // Логика для операций над SubUser.
│   │   └── (другие use cases)             // Дополнительные use-case файлы, если потребуется.
│   ├── infrastructure/                    // Инфраструктурный слой: реализация репозиториев, транспорт, база данных и т.д.
│   │   ├── db/                            // Пакет для подключения к базе данных (коннекшены, миграции).
│   │   │   └── gorm.go                    // Инициализация GORM (DSN, параметры, AutoMigrate).
│   │   ├── repositories/                  // Реализации доменных репозиториев, завязанные на инфраструктуру (GORM и др).
│   │   │   ├── user_repository.go         // GORM-реализация интерфейса UserRepository.
│   │   │   └── subuser_repository.go      // GORM-реализация интерфейса SubUserRepository.
│   │   ├── transport/                     // Транспортный слой: входящие/исходящие адаптеры (HTTP, gRPC и т.п.).
│   │   │   ├── http/                      // Весь HTTP-стек (маршрутизация, Gin-роутеры, хэндлеры).
│   │   │   │   ├── gin_handler.go         // Пример хэндлера на Gin (обработчики HTTP-запросов).
│   │   │   │   └── (другие http-хэндлеры) // Можно разбить по функциональным зонам, если много обработчиков.
│   │   │   └── grpc/                      // Реализация gRPC-сервисов, сгенерированных от .proto файлов.
│   │   │       ├── user_server.go         // gRPC-сервер с реализацией методов для User.
│   │   │       └── (другие gRPC-сервисы)  // Если нужно больше gRPC-сервисов.
│   │   └── token/                         // Генерация и валидация токенов (PASETO/JWT и т.п.).
│   │       └── paseto.go                  // Реализация логики PASETO-токенов (создание, проверка).
└── proto/                                 // Храним файлы .proto для gRPC (IDL), затем генерим код.
    ├── user_service.proto                 // Описание gRPC-сервиса для User.
    └── (другие *.proto)                   // Если есть иные gRPC-сервисы, добавьте дополнительные .proto.



Verificaciones

internal/
 ├── application/
 │   └── ports/
 │       └── verificaciones.go   // В нем интерфейс + DTO
 └── infrastructure/
     └── external/
         └── verificaciones/
             ├── service.go      // “верная” реализация
             └── errors.go       // (опционально) коды ошибок
             └── dto.go          // (опционально) внутренние структуры





-- 

TODO: 
* Hay que realizar control de add/remove usuarios. Mirar usuario por token, mirar usuario al cual quieremos añadir los roles, etc...
* Hay que controlar roles "company, company_"


TODO:
* Secondary user. Usuario compañia tiene que poder crear usuario secundario con su propio profile (profile se puede modificar luego).
Usuario secundario tiene provider "secondary". Al crear el usuario secundario se puede establecer un rol (roles) a este mismo usuario.
La contraseña debe generarse automaticamente. (Por ahora "qwe").
Usuario debe poder cambiar la contraseña.